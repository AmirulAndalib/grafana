// Code generated by mockery v2.14.0. DO NOT EDIT.

package healthchecks

import (
	context "context"

	models "github.com/grafana/grafana/pkg/services/healthchecks/models"
	mock "github.com/stretchr/testify/mock"
)

// MockHealthService is an autogenerated mock type for the Service type
type MockHealthService struct {
	mock.Mock
}

// GetHealthCheck provides a mock function with given fields: ctx, name
func (_m *MockHealthService) GetHealthCheck(ctx context.Context, name string) (bool, models.HealthCheck) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 models.HealthCheck
	if rf, ok := ret.Get(1).(func(context.Context, string) models.HealthCheck); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Get(1).(models.HealthCheck)
	}

	return r0, r1
}

// GetLatestHealth provides a mock function with given fields: ctx
func (_m *MockHealthService) GetLatestHealth(ctx context.Context) (models.HealthStatus, map[string]map[string]string) {
	ret := _m.Called(ctx)

	var r0 models.HealthStatus
	if rf, ok := ret.Get(0).(func(context.Context) models.HealthStatus); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.HealthStatus)
	}

	var r1 map[string]map[string]string
	if rf, ok := ret.Get(1).(func(context.Context) map[string]map[string]string); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]map[string]string)
		}
	}

	return r0, r1
}

// ListHealthChecks provides a mock function with given fields: ctx
func (_m *MockHealthService) ListHealthChecks(ctx context.Context) []models.HealthCheckConfig {
	ret := _m.Called(ctx)

	var r0 []models.HealthCheckConfig
	if rf, ok := ret.Get(0).(func(context.Context) []models.HealthCheckConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.HealthCheckConfig)
		}
	}

	return r0
}

// RegisterHealthCheck provides a mock function with given fields: ctx, config, checker
func (_m *MockHealthService) RegisterHealthCheck(ctx context.Context, config models.HealthCheckConfig, checker HealthChecker) error {
	ret := _m.Called(ctx, config, checker)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.HealthCheckConfig, HealthChecker) error); ok {
		r0 = rf(ctx, config, checker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunCoreHealthChecks provides a mock function with given fields: ctx
func (_m *MockHealthService) RunCoreHealthChecks(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunOnDemandHealthCheck provides a mock function with given fields: ctx, name
func (_m *MockHealthService) RunOnDemandHealthCheck(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockHealthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHealthService creates a new instance of MockHealthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHealthService(t mockConstructorTestingTNewMockHealthService) *MockHealthService {
	mock := &MockHealthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
